/* Class: MainWindow
 * -----------------
 * COMP.CS.110 Ohjelmointi 2: Rakenteet / Programming 2: Structures
 * -----------------
 *
 * Kuvaus:
 * MainWindow class .hh file where its attributes
 * and methods are mostly introduced.
 *
 * Ohjelman kirjoittaja ( Täytä omilla tiedoillasi )
 * Nimi: Ville Koli
 *
 * Huomioita ohjelmasta ja sen toteutuksesta (jos sellaisia on):
 *
 * */
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "gameboard.hh"
#include "constants.hh"

#include <QMainWindow>
#include <QPushButton>
#include <vector>
#include <string>


struct Ui_point{
    QPushButton* button;
    Point button_coords;
};

struct Ui_color_pair{
    Slot_type color;
    std::string css;
};

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();
private slots:
    /**
     * @brief select
     * Method allows player to move pieces on the board
     */
    void select();
    /**
     * @brief reset_board
     * Method resets ui board
     */
    void reset_board();
    /**
     * @brief update_timer
     * Method updates timers display
     */
    void update_timer();
    /**
     * @brief start_play
     * Method starts automatic play
     */
    void start_play();
    /**
     * @brief play
     * Method plays the game
     */
    void play();
    /**
     * @brief update_all_labels
     * @param start
     * @param end
     * Method updates all labels when
     * parameters are type of Ui_point*
     * Method parameters are used to
     * determine whether move is legal
     * or not.
     */
    void update_all_labels(Ui_point* start, Ui_point* end);
    /**
     * @brief update_all_labels
     * @param start
     * @param end
     * Method updates all labels when
     * parameters are type of Point
     * Method parameters are used to
     * determine whether move is legal
     * or not.
     */
    void update_all_labels(Point start, Point end);
    /**
     * @brief reset_all_ui_texts
     * Method resets all labels
     * to their original state
     */
    void reset_all_ui_texts();
    /**
     * @brief pause
     * Method pauses timer and
     * disables the board
     */
    void pause();
    /**
     * @brief pause_board
     * @param set_value
     * Method used to pause board
     * method is used in pause()
     * Methods parameter set_value
     * is used to determine whether
     * to freeze all buttons on ui_game_board_
     * or not.
     */
    void pause_board(bool set_value);

private:
    Ui::MainWindow *ui;
    QTimer* timer_;
    QTimer* play_timer_;
    std::vector<Ui_point*> ui_game_board_;
    Ui_point* last_selected_ = nullptr;

    const std::vector<Ui_color_pair> COLORS = {{GREEN, "background-color: green;"},
                                               {RED, "background-color: red;"},
                                               {EMPTY, "background-color: grey;"},
                                               {UNUSED, "background-color: black;"}};
    int time_s_ = 0;
    int moves_spent_ = 0;
    int player_points_ = 0;
    bool is_board_frozen_ = false;
    std::vector<Point>::size_type move_ = 0;

    // this vector was generated by playing the game
    // and saving play moves p1 to p2 in to a vector
    // and printing the result out when deconstructing
    // the window.
    const std::vector<Point> completed_game_ = {{1, 4}, {2, 2}, {1, 0}, {1, 4},{0, 0}, {1, 3},{2, 2}, {0, 0},{2, 0}, {2, 2},{3, 0}, {1, 2},{0, 0}, {3, 0},{1, 2}, {0, 0},{2, 2}, {2, 0},{1, 3},
                                                {2, 2},{1, 4}, {1, 0},{2, 4}, {1, 1},{0, 4}, {2, 4},{2, 2}, {0, 4},{2, 4}, {2, 2},{3, 4}, {1, 2},{0, 4}, {3, 4},{1, 2}, {0, 4},{2, 2}, {2, 4},
                                                {1, 1}, {1, 4},{1, 0}, {2, 2},{1, 4}, {1, 1},{2, 4}, {2, 4},{1, 1}, {1, 0},{2, 4}, {1, 1},{2, 2}, {2, 4},{0, 4}, {2, 2},{1, 1}, {0, 4},{1, 0}, {1, 4},
                                                {2, 0}, {1, 3},{2, 2}, {2, 0},{0, 0}, {2, 2},{1, 3}, {0, 0},{1, 4}, {1, 0},{0, 4}, {1, 1},{2, 2}, {0, 4},{1, 1}, {2, 2},{1, 0}, {1, 4},{0, 0}, {1, 3},
                                                {2, 2}, {0, 0},{1, 3}, {2, 2},{1, 4}, {1, 0},{2, 2}, {1, 4}};
    GameBoard* game_board_ = new GameBoard();

    /**
     * @brief generate_board
     * @param generate_to
     * @param width
     * @param height
     * Method generates Ui_point elements for
     * ui_game_board_
     */
    void generate_board(const Point generate_to = START_AT, int width = BUTTON_WIDTH, int height = BUTTON_HEIGHT);
    /**
     * @brief update_board
     * Method goes through board
     * and sets colors according to game_board_
     */
    void update_board();
    /**
     * @brief update_is_move_legal
     * @param start
     * @param destination
     * Method updates increases moves_spent_
     * and player_points_ if move is legal
     * also method updates labels is_move_legal
     * This method is used for type Ui_point*
     */
    void update_is_move_legal(Ui_point* start, Ui_point* destination);
    /**
     * @brief update_is_move_legal
     * @param start
     * @param destination
     * Method updates increases moves_spent_
     * and player_points_ if move is legal
     * also method updates labels is_move_legal
     * This method is used for type Point
     */
    void update_is_move_legal(Point start, Point destination);
    /**
     * @brief set_button_color
     * @param button
     * @param current_point
     * Method sets color for buttons in ui_game_board_
     */
    void set_button_color(QPushButton* button, const Point& current_point);
    /**
     * @brief have_you_won
     */
    void have_you_won();
};
#endif // MAINWINDOW_H
